{"version":3,"file":"index.js","mappings":"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","sources":["webpack://math-it/./index.ts"],"sourcesContent":["function render() {\n    var html = \"<div>\";\n    var mmToInch = 1 / 25.4;\n    var printableWidthInMM = 200;\n    var printableHeightInMM = 279;\n    var dpi = 300;\n    var xPixels = Math.ceil(dpi * printableWidthInMM * mmToInch);\n    var yPixels = Math.floor(dpi * printableHeightInMM * mmToInch);\n    html += \"<h1 class=\\\"non-printable\\\">Math Generator</h1>\";\n    var svgProblems = \"\";\n    var svgSolutions = \"\";\n    svgProblems = \"<svg class=\\\"non-selectable\\\" style=\\\"break-after:page\\\" viewBox=\\\"0 0 \".concat(xPixels, \" \").concat(yPixels, \"\\\" width=\\\"\").concat(printableWidthInMM, \"mm\\\" height=\\\"\").concat(printableHeightInMM, \"mm\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\");\n    svgSolutions = \"<svg class=\\\"non-selectable\\\" style=\\\"break-after:page\\\" viewBox=\\\"0 0 \".concat(xPixels, \" \").concat(yPixels, \"\\\" width=\\\"\").concat(printableWidthInMM, \"mm\\\" height=\\\"\").concat(printableHeightInMM, \"mm\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\");\n    var textSize = Math.ceil(0.125 * dpi);\n    var gridWidth = Math.ceil(0.15 * dpi);\n    var gridHeight = Math.ceil(0.25 * dpi);\n    var charXOffset = Math.ceil(0.0275 * dpi);\n    var charYOffset = Math.round(-0.02 * dpi);\n    svgProblems += \"\\n    <style>\\n        .digits {\\n            font-family: Consolas, monaco, monospace;\\n            font-size: \".concat(textSize, \"px;\\n            font-style: normal;\\n            font-variant: normal;\\n            font-weight: 700;\\n            line-height: \").concat(textSize, \"px;\\n        }\\n        .carryover {\\n            font-family: Consolas, monaco, monospace;\\n            font-size: \").concat(textSize / 2, \"px;\\n            font-style: normal;\\n            font-variant: normal;\\n            font-weight: 700;\\n            line-height: \").concat(textSize / 2, \"px;\\n        }\\n    </style>\");\n    svgSolutions += \"\\n    <style>\\n        .digits {\\n            font-family: Consolas, monaco, monospace;\\n            font-size: \".concat(textSize, \"px;\\n            font-style: normal;\\n            font-variant: normal;\\n            font-weight: 700;\\n            line-height: \").concat(textSize, \"px;\\n        }\\n        .carryover {\\n            font-family: Consolas, monaco, monospace;\\n            font-size: \").concat(textSize / 2, \"px;\\n            font-style: normal;\\n            font-variant: normal;\\n            font-weight: 700;\\n            line-height: \").concat(textSize / 2, \"px;\\n        }\\n    </style>\");\n    var cornerSize = Math.ceil(0.05 * dpi);\n    // svgProblems += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"0\" y=\"0\" fill=\"black\" />`;\n    // svgProblems += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"${xPixels - cornerSize}\" y=\"0\" fill=\"black\" />`;\n    // svgProblems += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"0\" y=\"${yPixels - cornerSize}\" fill=\"black\" />`;\n    // svgProblems += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"${xPixels - cornerSize}\" y=\"${yPixels - cornerSize}\" fill=\"black\" />`;\n    // svgSolutions += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"0\" y=\"0\" fill=\"black\" />`;\n    // svgSolutions += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"${xPixels - cornerSize}\" y=\"0\" fill=\"black\" />`;\n    // svgSolutions += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"0\" y=\"${yPixels - cornerSize}\" fill=\"black\" />`;\n    // svgSolutions += `<rect width=\"${cornerSize}\" height=\"${cornerSize}\" x=\"${xPixels - cornerSize}\" y=\"${yPixels - cornerSize}\" fill=\"black\" />`;\n    function character(char, x, y) {\n        return \"<text x=\\\"\".concat(cornerSize + x * gridWidth + charXOffset, \"\\\" y=\\\"\").concat(cornerSize + textSize + gridHeight * y + charYOffset, \"\\\" class=\\\"digits\\\">\").concat(char, \"</text>\");\n    }\n    function carryover(char, x, y) {\n        return \"<text x=\\\"\".concat(cornerSize + x * gridWidth + charXOffset + 5, \"\\\" y=\\\"\").concat(cornerSize + gridHeight * y + charYOffset, \"\\\" class=\\\"carryover\\\">\").concat(char, \"</text>\");\n    }\n    function equationLine(left, right, y) {\n        return \"<rect x=\\\"\".concat(cornerSize + left * gridWidth, \"\\\" y=\\\"\").concat(cornerSize + textSize + gridHeight * y, \"\\\" width=\\\"\").concat(Math.ceil((right - left + 1) * gridWidth), \"\\\" height=\\\"\").concat(Math.ceil(0.01 * dpi), \"\\\" fill=\\\"black\\\" />\");\n    }\n    function blanks(left, right, y, color) {\n        if (color === void 0) { color = \"black\"; }\n        var svg = \"\";\n        for (var x = left; x <= right; x++) {\n            svg += \"<rect x=\\\"\".concat(cornerSize + x * gridWidth + Math.floor(gridWidth * 0.15), \"\\\" y=\\\"\").concat(cornerSize + textSize + gridHeight * y - Math.floor(gridHeight * 0.1), \"\\\" width=\\\"\").concat(Math.ceil(gridWidth * 0.7), \"\\\" height=\\\"\").concat(Math.ceil(0.01 * dpi), \"\\\" fill=\\\"lightgray\\\" />\");\n        }\n        return svg;\n    }\n    for (var column = 0; column < 3; column++) {\n        for (var row = 0; row < 6; row++) {\n            var columnChars = 17;\n            var problemRowLines = 7;\n            var problemRowOffset = 2;\n            var problemColumnOffset = -2;\n            var firstNumberLength = random(3, 6);\n            var secondNumberLength = random(2, Math.min(4, firstNumberLength - 1));\n            var numberA = random(Math.pow(10, firstNumberLength - 1), Math.pow(10, firstNumberLength) - 1);\n            var numberB = random(Math.pow(10, secondNumberLength - 1), Math.pow(10, secondNumberLength) - 1);\n            var top_1 = row * problemRowLines + problemRowOffset;\n            var left = column * columnChars + problemColumnOffset;\n            var problem = numberA.toString() + \"·\" + numberB.toString();\n            for (var char = 0; char < problem.length; char++) {\n                var text = character(problem[char], (columnChars + 1 - problem.length) + left + char, top_1);\n                svgProblems += text;\n                svgSolutions += text;\n            }\n            svgProblems += character(\"+\", left + columnChars - problem.length + 1, top_1 + 0.5 * secondNumberLength + 0.1);\n            svgSolutions += character(\"+\", left + columnChars - problem.length + 1, top_1 + 0.5 * secondNumberLength + 0.1);\n            svgProblems += equationLine(left + columnChars - problem.length + 1, left + columnChars, top_1);\n            svgSolutions += equationLine(left + columnChars - problem.length + 1, left + columnChars, top_1);\n            for (var eq = 0; eq < secondNumberLength; eq++) {\n                svgProblems += blanks(left + columnChars - firstNumberLength - eq, left + columnChars - eq, top_1 + eq + 1);\n                svgSolutions += blanks(left + columnChars - firstNumberLength - eq, left + columnChars - eq, top_1 + eq + 1);\n            }\n            svgProblems += equationLine(left + columnChars - problem.length + 1, left + columnChars, top_1 + secondNumberLength);\n            svgSolutions += equationLine(left + columnChars - problem.length + 1, left + columnChars, top_1 + secondNumberLength);\n            svgProblems += blanks(left + columnChars - firstNumberLength - secondNumberLength + 1, left + columnChars, top_1 + secondNumberLength + 1);\n            svgSolutions += blanks(left + columnChars - firstNumberLength - secondNumberLength + 1, left + columnChars, top_1 + secondNumberLength + 1);\n            var lineNumbers = [];\n            for (var row_1 = 0; row_1 < secondNumberLength; row_1++) {\n                lineNumbers.push([]);\n                for (var column_1 = 0; column_1 < firstNumberLength + secondNumberLength; column_1++) {\n                    lineNumbers[row_1][column_1] = 0;\n                }\n            }\n            // Solve...\n            for (var solutionLine = 0; solutionLine < secondNumberLength; solutionLine++) {\n                var digitB = Number.parseInt(numberB.toString()[numberB.toString().length - 1 - solutionLine]);\n                if (digitB == 0) {\n                    svgSolutions += character(\"0\", left + columnChars - solutionLine, top_1 + 1 + solutionLine);\n                    continue;\n                }\n                var carryOver = 0;\n                for (var i = 0; i < firstNumberLength; i++) {\n                    var digitA = Number.parseInt(numberA.toString()[numberA.toString().length - 1 - i]);\n                    var result = carryOver + digitA * digitB;\n                    var resultDigit = result % 10;\n                    carryOver = Math.floor(result / 10);\n                    lineNumbers[solutionLine][firstNumberLength + secondNumberLength - 1 - i - solutionLine] = resultDigit;\n                    svgSolutions += character(resultDigit.toString(), left + columnChars - i - solutionLine, top_1 + 1 + solutionLine);\n                    if (carryOver > 0) {\n                        svgSolutions += carryover(carryOver.toString(), left + columnChars - i - solutionLine - 1, top_1 + 1 + solutionLine);\n                    }\n                }\n                if (carryOver > 0) {\n                    svgSolutions += character(carryOver.toString(), left + columnChars - firstNumberLength - solutionLine, top_1 + 1 + solutionLine);\n                    lineNumbers[solutionLine][firstNumberLength + secondNumberLength - 1 - firstNumberLength - solutionLine] = carryOver;\n                }\n            }\n            // TODO: Calculate the lineNumbers[row][col] to figure out carryovers\n            var carryoverTotal = 0;\n            for (var i = 0; i < firstNumberLength + secondNumberLength; i++) {\n                var sum = carryoverTotal;\n                for (var j = 0; j < secondNumberLength; j++) {\n                    sum += lineNumbers[j][firstNumberLength + secondNumberLength - 1 - i];\n                }\n                var solutionDigit = sum % 10;\n                carryoverTotal = Math.floor(sum / 10);\n                if (i < firstNumberLength + secondNumberLength - 1 || solutionDigit != 0) {\n                    svgSolutions += character(solutionDigit.toString(), left + columnChars - i, top_1 + 1 + secondNumberLength);\n                }\n                if (carryoverTotal > 0) {\n                    svgSolutions += carryover(carryoverTotal.toString(), left + columnChars - i - 1, top_1 + 1 + secondNumberLength);\n                }\n            }\n            // const solution = (numberA * numberB).toString();\n            // for (let char = 0; char < solution.length; char++) {\n            //     svgSolutions += character(solution[char], left + columnChars - solution.length + 1 + char, top + 1 + secondNumberLength);\n            // }\n        }\n    }\n    svgProblems += \"</svg>\";\n    svgSolutions += \"</svg>\";\n    html += svgProblems;\n    html += svgSolutions;\n    html += \"</div>\";\n    var parser = new DOMParser();\n    var htmlDoc = parser.parseFromString(html, 'text/html');\n    return htmlDoc.querySelector(\"div\");\n}\nfunction random(from, to) {\n    return from + Math.floor(Math.random() * (to - from + 1));\n}\ndocument.body.appendChild(render());\n"],"names":["random","from","to","Math","floor","document","body","appendChild","html","mmToInch","xPixels","ceil","dpi","yPixels","svgProblems","svgSolutions","concat","textSize","gridWidth","gridHeight","charXOffset","charYOffset","round","cornerSize","character","char","x","y","carryover","equationLine","left","right","blanks","color","svg","column","row","columnChars","firstNumberLength","secondNumberLength","min","numberA","pow","numberB","top_1","problem","toString","length","text","eq","lineNumbers","row_1","push","column_1","solutionLine","digitB","Number","parseInt","carryOver","i","result","resultDigit","carryoverTotal","sum","j","solutionDigit","DOMParser","parseFromString","querySelector","render"],"sourceRoot":""}